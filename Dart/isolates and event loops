다트는 싱글 스레드를 가짐에도 불구하고 여러 다양한 모던한 기능과 백그라운드 작업, 비동기화를 지원한다. 다트의 백그라운드를 위한 기능으로 isolates와 event loops가 있다.

isolates
isolate는 작은 공간으로 그것만의 메모리와 event loops를 위한 싱글 스레드를 가지며 다트 코드가 돌아가는 곳이다.
원래 다른 언어의 스레드는 외부와 같은 메모리를 공유하고, 아무 코드나 돌릴 수 있다. 하지만 다트의 쓰레드는 isolate에만 격리되어 있으므로 그것만의 메모리를 가지고 쓰레드는 그것만의 일만 한다.
왜 이런게 있을까? 이것은 C++이나 자바 같은 언어의 사용자들에겐 너무 엄격한 제약처럼 보이지만, 이는 앱 환경에서의 이용을 크게 돕는다. 
다트는 하나의 쓰레드만 있으므로(다른 언어는 다수개) 그것이 사용되지 않음 자체로 알기 쉽기에(이 부분은 설명이 가볍게 되어있어서, 이유를 몰라서 걍 내가 추측함) 가비지 컬렉션과 메모리 할당을 자유롭게 할 수 있고, 이 덕에 여러 위젯들을 빠르게 실행시키고 종료하여 정리 할 수 있다.

isolate는 스레드와 비슷하게도 사용 가능한데, 요구에 따라 여러개 늘릴 수 있다. 그렇게 하여 메인 isolate에서 사용하면 프레임 저하를 일으킬 수 있는 너무 거대한 연산의 경우 다른 isolate에서 돌릴수가 있다.
그렇다면 통신은 완전히 차단되어 사용이 불가능한가? 그건 아닌데 다행히도 isolate들 끼리 event loop를 통해 통신이 가능하기 때문에, c++의 스레드와 비슷하게 통신하고 기능할 수 있다.

출처 : https://medium.com/dartlang/dart-asynchronous-programming-isolates-and-event-loops-bffc3e296a6a
